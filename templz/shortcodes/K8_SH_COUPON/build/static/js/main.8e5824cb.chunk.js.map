{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","isFetched","selectedCat","selectedTyp","inrow","showAll","bind","handleCatChange","handleTypChange","handleSpecoffer","fetch","this","fUrl","then","response","json","jsonData","setState","fetchedData","filteredData","coup_data","catch","error","console","event","target","value","todoItems","filtersCat","fill_data","category","filtersTyp","type","maxWidth","selCat","Object","keys","map","keyName","keyIndex","selTyp","filter","coupon","includes","todo","index","className","style","src","image","url","width","height","alt","title","until","discount","description","code","href","rel","onChange","name","checked","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","coupMng","document","getElementById","ReactDOM","render","StrictMode","dataset"],"mappings":"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","file":"static/js/main.8e5824cb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFetched: false,\n      selectedCat: 'all',\n      selectedTyp: 'all',\n      inrow: this.props.inrow\n    };\n    this.showAll = this.showAll.bind(this);\n    this.handleCatChange = this.handleCatChange.bind(this);\n    this.handleTypChange = this.handleTypChange.bind(this);\n    this.handleSpecoffer = this.handleSpecoffer.bind(this);\n  }\n\n  componentDidMount(){\n    fetch(this.props.fUrl)\n      .then(response => response.json())\n      .then((jsonData) => {\n        // console.log('fetched!!');\n        this.setState({\n          isFetched: true,\n          fetchedData: jsonData,\n          filteredData: jsonData.coup_data\n        });\n      })\n      .catch((error) => {\n        console.error(error)\n      })\n  }\n\n  showAll() {\n    this.setState(function(state, props) {\n      return {\n        filteredData: state.fetchedData.coup_data,\n        selectedCat: 'all',\n        selectedTyp: 'all'\n      };\n    });    \n  }\n\n  handleCatChange(event) {\n    this.setState(function(state, props) {\n      return {\n        selectedCat: event.target.value\n      };\n    });\n  }\n\n  handleTypChange(event) {\n    this.setState(function(state, props) {\n      return {\n        selectedTyp: event.target.value\n      };\n    });\n  }\n\n  handleSpecoffer(event) {\n    this.setState(function(state, props) {\n      return {\n        selectedTyp: event.target.value\n      };\n    });\n  }\n\n\n  render() {\n    let todoItems = 'Loading..';\n    if(this.state.isFetched){\n      let filteredData = this.state.filteredData;\n      const filtersCat = this.state.fetchedData.fill_data.category;\n      const filtersTyp = this.state.fetchedData.fill_data.type;\n      const maxWidth = (100 / this.state.inrow);\n      const selCat = Object.keys(filtersCat).map(function(keyName, keyIndex) {\n        return <option value={keyName} key={keyIndex}>{filtersCat[keyName]}</option>\n      });\n      \n      const selTyp = Object.keys(filtersTyp).map(function(keyName, keyIndex) {\n        return <option value={keyName} key={keyIndex}>{filtersTyp[keyName]}</option>\n      });\n\n      if( this.state.selectedCat !== 'all' ){\n        filteredData = filteredData.filter(coupon => coupon.category.includes(this.state.selectedCat));\n      }\n      if( this.state.selectedTyp !== 'all' ){\n        filteredData = filteredData.filter(coupon => coupon.type.includes(this.state.selectedTyp));\n      }\n\n      todoItems = filteredData.map((todo, index) =>\n        <div className=\"gridd__wrr\" key={index} style={{maxWidth: maxWidth + \"%\"}}>\n          <div className=\"gridd__item\">\n            <div className=\"gridd__head\">\n              <img className=\"gridd__head-logo\" src={todo.image.url} width={todo.image.width} height={todo.image.height} alt={todo.title}/> \n              <p className=\"gridd__head-until\">GÃ¼ltig bis {todo.until}</p>\n              {todo.discount &&\n                <span className=\"gridd__head-discount\">{todo.discount}</span>\n              }\n            </div> \n            <div className=\"gridd__body\">\n              <h3>{todo.title}</h3>\n              <p>{todo.description}</p>\n              <div className=\"gridd__butts\">\n                {todo.code ?\n                  <div className=\"gridd__butt gridd__butt-code\">\n                    <span>{todo.code}</span>\n                    <i className=\"fas fa-copy\"></i>\n                  </div> :\n                  <span>&nbsp;</span>\n                }\n                <a href={todo.url} className=\"gridd__butt gridd__butt-url\" rel=\"nofollow\" target=\"_blank\">\n                  ANGEBOT SEHEN\n                  <i className=\"fas fa-thumbs-up\"></i>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n   \n\n    return (\n      <div className=\"contt\">\n        <div className=\"contt__filterz\"> \n          <select className=\"contt__control\" value={this.state.selectedCat} onChange={this.handleCatChange}>\n            {selCat}\n          </select>\n          <select className=\"contt__control\" value={this.state.selectedTyp} onChange={this.handleTypChange}>\n            {selTyp}\n          </select>\n          <label className=\"contt__control contt__control-radio\">\n            <input\n              name=\"specoffer\"\n              type=\"radio\"\n              value=\"blackfriday\"\n              checked={this.state.selectedTyp === 'blackfriday' ? true : false}\n              onChange={this.handleSpecoffer} />\n              Black Friday\n          </label>\n          <label className=\"contt__control contt__control-radio\">\n            <input\n              name=\"specoffer\"\n              type=\"radio\"\n              value=\"cybermonday\"\n              checked={this.state.selectedTyp === 'cybermonday' ? true : false}\n              onChange={this.handleSpecoffer} />\n              Cyber Monday\n          </label>\n          {this.state.selectedCat !== 'all' || this.state.selectedTyp !== 'all' \n            ? <button className=\"contt__control\" onClick={this.showAll}>Reset!</button>\n            : ''\n          }\n        </div>\n        <div className=\"gridd\">\n          {todoItems}\n        </div>\n      </div>\n    );\n  }\n    // Not fetched data yet\n    else{\n      return (<div>{todoItems}</div>)\n    }\n  }\n\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nlet coupMng = document.getElementById('coupMng');\nReactDOM.render(\n  <React.StrictMode>\n    <App fUrl={coupMng.dataset.fUrl} inrow={coupMng.dataset.inrow}/>\n  </React.StrictMode>,\n  coupMng\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}